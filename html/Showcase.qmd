---
title: "Quantitative Metabarcoding"
format: 
  html:
    toc: true
    toc-location: left
    toc-title: "Table of Contents"
    toc-depth: 2
    number-sections: true
    page-layout: full
    self-contained: true 
    collapsible: true
    collapse-level: 1
    grid:
      sidebar-width: 200px
      body-width: 880px
      margin-width: 200px
      gutter-width: 1.5rem
author: Gled Guri
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor: source
editor_options: 
  chunk_output_type: console
---

<style>
body {
  font-family: Arial, sans-serif;
  font-size: 18px;
}

h1 {
  font-size: 22px;  /* Adjust the size of H1 headers */
  font-weight: bold;  /* Make H1 headers not bold */
}

h2 {
  font-size: 18px;  /* Adjust the size of H2 headers */
  font-weight: normal;  /* Make H2 headers not bold */
}

h3 {
  font-size: 18px;  /* Adjust the size of H3 headers */
  font-weight: normal;  /* Make H3 headers not bold */
}

h4 {
  font-size: 18px;  /* Adjust the size of H4 headers */
  font-weight: normal;  /* Make H4 headers not bold */
}
</style>

```{r, include=FALSE}
dwidth <- 150
options(width = dwidth)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 300) #wd
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = dwidth)#wd
```

Load the package and its dependencies

```{r, warning=FALSE, message=FALSE, results='hide'}
devtools::install_github("gledguri/QM",dependencies = TRUE, force = T )
library(QM)
load_QM_packages()
```

Load the data

```{r, warning=FALSE, message=FALSE, results='hide'}
# data(herring_qpcr);force(herring_qpcr)
data(cod_qpcr);force(cod_qpcr)
data(metabarcoding);force(metabarcoding)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 1300) #wd 
```

```{r}
cod_qpcr
metabarcoding
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 300) #wd
```

# Model 1

Here we make use of the standard concentration to learn the parameters that link the known DNA concentration (C) with observed Ct values (Y) and positive / negative qPCR amplification (Z). For detailed explanation please read [Guri et al., 2024](https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.70678). 

$$
\begin{aligned}
&\textbf{qPCR probability of detection model}\\
Z_{ij} &\sim \text{Bernoulli}(\theta_{i}) && \text{(1.1)} \\
\theta_{i} &= 1 - exp(-W_{i} \cdot \phi) && \text{(1.2)} \\
&\text{}\\
&\textbf{qPCR continuous model}\\
Y_{ij} &\sim \text{Normal}(\mu_{i}, \sigma_{i}) && \text{(2.1)} \\
\mu_{i} &= \beta0_{p} + \beta1 \cdot ln(C_{i}) && \text{(2.2)} \\
\sigma_{i} &= e^{(\gamma0 + \gamma1 \cdot ln(C_{i}))} && \text{(2.3)}
\end{aligned}
$$

```{r, warning=FALSE, message=FALSE,results='hide'}
M1 <- load_model('M1')
```

## Prepare the data to be loaded in the model.

The data should be formated in a particular form distinguishing the different samples and their information. Please use `data_example('M1')` to see the data format for required for Model 1 or use `data(cod_qpcr)` to load the data from [Guri et al., 2024](https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.70678) that are used in this script. 


```{r}
stan_data_M1 <- prep_stan_M1(
   qpcr_data = cod_qpcr %>% filter(Sample_type=="STANDARD"),
   Ct = "Ct",
   standard_concentration = "Std_concentration",
   plate_index = 'Plate')
```

## Run the model.

This chunk runs the Bayesian model (eq. 1.1 - 2.3) where C is the known DNA concentration from the Standard samples, Y is the observed Ct values form the qPCR machine and Z (Z = 1 for positive amplification & Z = 0 for non amplification hence Ct == 'Undetermined')


```{r}
M1_output <- Run_Model(stan_object = M1, stan_data = stan_data_M1)
```

### Plot outputs of Model 1

```{r, fig.width=8, fig.height=5}
extract_qpcr_param(M1_output) %>% as.tibble()
plot_qpcr_prob_det(M1_output)
plot_qpcr_cont_mod(M1_output)
```

```{r, fig.width=17, fig.height=6}
plot_qpcr_curves(M1_output)
```

```{r, fig.width=15, fig.height=9}
plot_qpcr_cont_mod_plate_specific(M1_output)
```

### Run Model 2

```{r, warning=FALSE, message=FALSE,results='hide'}
M2 <- load_model('M2')
```

```{r}
# Prepare the data for going into the model
stan_data_M2 <- prep_stan_M2(
	qpcr_data = cod_qpcr,
	sample_type = "Sample_type",
	Ct = "Ct",
	sample_name_column = "Sample_name",
	standard_concentration = "Std_concentration",
	plate_index = 'Plate')

# Run the model
M2_output <- Run_Model(stan_object = M2, stan_data = stan_data_M2)
```

### Plot outputs of Model 2

```{r, fig.width=17, fig.height=6, warning=FALSE, message=FALSE}
extract_qpcr_param(M2_output) %>% as_tibble()
extract_est_conc(M2_output) %>% as_tibble()
plot_qpcr_curves(M2_output)
```

```{r, fig.width=10, fig.height=5, warning=FALSE, message=FALSE}
plot_qpcr_prob_det(M2_output)
plot_qpcr_cont_mod(M2_output)
```

```{r, fig.width=17, fig.height=9, warning=FALSE, message=FALSE}
plot_qpcr_cont_mod_plate_specific(M2_output)
```

```{r, fig.width=17, fig.height=8, warning=FALSE, message=FALSE}
plot_est_conc(M2_output)
```

### Run Model 3

```{r, warning=FALSE, message=FALSE,results='hide'}
M3 <- load_model('M3')
```

```{r}
# Trim metabarcoding data only for mock samples
moc_dat <- metabarcoding %>% select(Species,sp_idx,ini_conc,Mock_1:Mock_6)

# # Prepare the data for going into the model
stan_data_M3 <- prep_stan_M3(
	metabarcoding_data = moc_dat,
	mock_sequencing_columns = c('Mock_1','Mock_2','Mock_3','Mock_4','Mock_5','Mock_6'),
	mock_initial_concentration = 'ini_conc',
	species_index = 'sp_idx',
	species_names = 'Species',
	number_of_PCR = 43,
	alpha_magnitude = 0.1)

# Run the model
M3_output <- Run_Model(stan_object = M3, stan_data = stan_data_M3)
```

### Plot outputs of Model 3

```{r, fig.width=17, fig.height=7}
extract_amp_efficiecy(M3_output)
amp_eff_output_extract(M3_output)
plot_amp_eff(M3_output)
```

### Run Model 4

```{r, warning=FALSE, message=FALSE,results='hide'}
M4 <- load_model('M4')
```

```{r}
# Get column names for mock samples and environmental samples
mock_columns <- metabarcoding %>% select(Mock_1:Mock_6) %>% names()
sample_columns <- metabarcoding %>% select(-all_of(mock_columns),-Species,-sp_idx,-ini_conc) %>% names()

# Prepare the data for going into the model
stan_data_M4 <- prep_stan_M4(
	metabarcoding_data = metabarcoding,
	mock_sequencing_columns = mock_columns,
	sample_sequencing_columns = sample_columns,
	mock_initial_concentration = 'ini_conc',
	species_index = 'sp_idx',
	species_names = 'Species',
	number_of_PCR = 43,
	alpha_magnitude = 0.1)

M4_output <- Run_Model(stan_object = M4, stan_data = stan_data_M4)
```

### Plot outputs of Model 4

```{r, fig.width=17, fig.height=7}
extract_amp_efficiecy(M4_output)
amp_eff_output_extract(M4_output)
plot_amp_eff(M4_output)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 1300) #wd
```

```{r, fig.width=17, fig.height=7}
extract_ini_prop(M4_output)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 300) #wd
```

```{r, fig.width=17, fig.height=7}
bar_plot_est_ini_prop(M4_output)
heatmap_plot_est_ini_prop(M4_output)
```

### Run Model 5

```{r, warning=FALSE, message=FALSE,results='hide'}
M5 <- load_model('M5')
```

```{r,warning=FALSE, message=FALSE,results='hide'}
mock_columns <- metabarcoding %>% select(Mock_1:Mock_6) %>% names()
sample_columns <- metabarcoding %>% select(-all_of(mock_columns),-Species,-sp_idx,-ini_conc) %>% names()

# qpcr <- qpcr %>% filter(qpcr$Sample_name%in%sample_columns|qpcr$Sample_type=='STANDARD')

stan_data_M5 <- prep_stan_M5(
	qpcr_data = cod_qpcr,
	sample_type = "Sample_type",
	Ct = "Ct",
	sample_name_column = "Sample_name",
	standard_concentration = "Std_concentration",
	plate_index = 'Plate',
	metabarcoding_data = metabarcoding,
	mock_sequencing_columns = mock_columns,
	sample_sequencing_columns = sample_columns,
	mock_initial_concentration = 'ini_conc',
	species_index = 'sp_idx',
	species_names = 'Species',
	number_of_PCR = 43,
	alpha_magnitude = 0.1)

M5_output <- Run_Model(stan_object = M5, stan_data = stan_data_M5,
											 treedepth = 12,iterations = 2000,warmup = 1000)
```

### Plot outputs of Model 5

```{r, fig.width=17, fig.height=7}
extract_amp_efficiecy(M5_output)
amp_eff_output_extract(M5_output)
plot_amp_eff(M5_output)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 1300) #wd
```

```{r, fig.width=17, fig.height=7}
extract_ini_prop(M5_output)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 300) #wd
```

```{r, fig.width=17, fig.height=7}
bar_plot_est_ini_prop(M5_output)
heatmap_plot_est_ini_prop(M5_output)
plot_est_ini_conc(M5_output)
```
