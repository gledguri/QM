---
title: "Quantitative Metabarcoding"
format: 
  html:
    toc: true
    toc-location: left
    toc-title: "Table of Contents"
    toc-depth: 2
    number-sections: true
    page-layout: full
    self-contained: true 
    collapsible: true
    collapse-level: 1
    grid:
      sidebar-width: 200px
      body-width: 880px
      margin-width: 200px
      gutter-width: 1.5rem
author: Gled Guri
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor: source
editor_options: 
  chunk_output_type: console
---

```{=html}
<style>
body {
  font-family: Arial, sans-serif;
  font-size: 18px;
}

h1 {
  font-size: 22px;  /* Adjust the size of H1 headers */
  font-weight: bold;  /* Make H1 headers not bold */
}

h2 {
  font-size: 18px;  /* Adjust the size of H2 headers */
  font-weight: normal;  /* Make H2 headers not bold */
}

h3 {
  font-size: 18px;  /* Adjust the size of H3 headers */
  font-weight: normal;  /* Make H3 headers not bold */
}

h4 {
  font-size: 18px;  /* Adjust the size of H4 headers */
  font-weight: normal;  /* Make H4 headers not bold */
}
</style>
```

```{r, include=FALSE}
dwidth <- 150
options(width = dwidth)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 300) #wd
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = dwidth)#wd
```

Please cite:\
Guri et al., [(2024)](https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.70678) Quantifying the Detection Sensitivity and Precision of qPCR and ddPCR Mechanisms for eDNA Samples) for Models 1-2.\
Guri et al., [(2024)](https://academic.oup.com/icesjms/article/81/8/1536/7728836) (Predicting trawl catches using environmental DNA) for models 3-5.\

This package is designed to simplify complex mathematical processes, allowing researchers, resource managers, and technicians to analyze environmental DNA (eDNA) data without needing advanced mathematical expertise. By using Bayesian inference, the package helps estsimate eDNA concentration from field samples. This package is currently in beta development, and new features and improved documentation are ongoing. Please feel free to reach out with any questions or feedback.

This package includes 5 models that can be used individually or joined within 3 frames of inferences:\
1. qPCR ([M1](#Model_1) & [M2](#Model_2))\
2. Metabarcoding ([M3](#Model_3) & [M4](#Model_4))\
3. qPCR + Metabarcoding ([M5](#Model_5) which jointly estimates M1-M4)

**Directed Acyclic Graph (DAG) of the model overview**

![QM model overview](../Images/Model_layout.jpg)

First things first, load the package and its dependencies.

```{r, warning=FALSE, message=FALSE, results='hide'}
devtools::install_github("gledguri/QM")
library(QM)
load_QM_packages()
```

You can load your data but I have included a set of data in the package to work and play with.

```{r, warning=FALSE, message=FALSE, results='hide'}
# data(herring_qpcr);force(herring_qpcr) #extra data to play around with
data(cod_qpcr);force(cod_qpcr)
data(metabarcoding);force(metabarcoding)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 1300) #wd 
```

Let's view the data

```{r}
cod_qpcr
metabarcoding
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 300) #wd
```

**Before you run any model**

All the models are designed to be run in similar chain operations:\
\
***(1) Load model --\> (2) Prepare data --\> (3) Run model --\> (4) Extract output --\> (5) Plot output***\

1.  Load model is a function that load and compile the stan model into your local computer by running `load_model('Model number')`. All the stan model are located in the github repository under folder Stan. Loading each model takes slightly less than 1 min.\
2.  Prepare data are a set of functions that converts the data frame into a list that will be thereafter imputed when running the stan model (step 3). For running this function the data should be formatted in a particular form, distinguishing the different samples and their information. Please use `data_example('Model number')` or use `data(cod_qpcr)` or `data(metabarcoding)` to see the data format for required for running prepare data functions. The output of this function is a list.\
3.  Run Stan model is a function that calls the compiled stan model (step 1) and loads the prepared data (step 2) onto the model. The output of this function is a list containing 2 lists (\[1\] data list (created in step 2) and \[2\] stan model output). If you are interested in only looking at the output of the model you can pull out the second list `output_list[[2]]` 4. Extract output are a set of functions that extract the interested parameters from each specific model output (M1 - M5; step 3) hence the functions are tailored for each particular model output and stan model code. To have an overview of all functions please read through this document or check [all functions](#All_functions)\
4.  Plot output are a set of functions that plot the interested parameters from each specific model output (M1 - M5; step 3 and 4) hence the functions are tailored for each particular model output and stan model code. To have an overview of all functions please read through this document or check [all functions](#All_functions). These are standard plots I have created but feel free to generate any plot as you see fit; all model outputs can be extracted either by using `extract_param(model = output_list[[2]], par = 'parameter_name')` or simply by printing out `output_list[[2]]`\

# Model 1 {#Model_1}

Before going to load and run Model 1 and 2 here's a description of the model.\
This model implements a two step model (joint model) to estimate the relationship between DNA concentration (C) and qPCR outcomes (Y and Z). The model jointly combines two compartments (eq. 1.1 - 2.3) to estimate DNA concentration using both Ct values (Y) and positive or negative qPCR amplification outcomes (Z). For detailed explanation please read [Guri et al., 2024](https://onlinelibrary.wiley.com/doi/full/10.1002/ece3.70678).

In short the presence (Z = 1) or absence (Z = 0) of qPCR amplification in sample $i$ in technical replicate $j$ is modeled as a Bernoulli random variable with the probability of amplification $\theta_i$. The probability of amplification arises from a Poisson process with rate parameter $\lambda$. The probability of having no amplification events is given by $e^{-\lambda}$, and thus the probability of positive amplification is $1-e^{-\lambda}$. We model $\lambda$ as a function of concentration where $\lambda = C \cdot \phi$. Hence $\phi$ is the probability that a single target molecule in reaction will lead to a successful amplification event. In the ideal scenario when only one target molecule is in the reaction and it gets successfully amplified, $\phi = 1$.

Additionally the second compartment models the observed Ct values (Y) in sample $i$ in technical replicate $j$ as random variable drawn from a Normal distribution with mean $\mu$ and standard deviation $\sigma$. We model $\mu$ as a linear function of DNA concentration (C) with intercept and slope $\beta0$ and $\beta1$ (Equation 2.2). The standard deviation of the observed Y is an exponential function of DNA concentration with intercept and slope $\gamma0$ and $\gamma1$ (Equation 2.3). Note that $\beta0$ (intercept between Ct and DNA concentration) has subscript $_p$ meaning that is different for every plate. The reason for having a different $\beta0$ is due to the qPCR machine being sensitive to external factors hence every qPCR run has a different $\Delta$Rn (normalized fluorescence signal).

$$
\begin{aligned}
&\textbf{qPCR probability of detection model}\\
Z_{ij} &\sim \text{Bernoulli}(\theta_{i}) && \text{(1.1)} \\
\theta_{i} &= 1 - exp(-C_{i} \cdot \phi) && \text{(1.2)} \\
&\text{}\\
&\textbf{qPCR continuous model}\\
Y_{ij} &\sim \text{Normal}(\mu_{i}, \sigma_{i}) && \text{(2.1)} \\
\mu_{i} &= \beta0_{p} + \beta1 \cdot ln(C_{i}) && \text{(2.2)} \\
\sigma_{i} &= e^{(\gamma0 + \gamma1 \cdot ln(C_{i}))} && \text{(2.3)}
\end{aligned}
$$

## Load the stan model

```{r, warning=FALSE, message=FALSE,results='hide'}
M1 <- load_model('M1')
```

## Prepare the data to be loaded in the model.

The data should be formatted in a particular form. Please use `data_example('M1')` to see the data format for required for Model 1 or use `data(cod_qpcr)` to load the data included in the package.

```{r}
stan_data_M1 <- prep_stan_M1(
   qpcr_data = cod_qpcr %>% filter(Sample_type=="STANDARD"),
   Ct = "Ct",
   standard_concentration = "Std_concentration",
   plate_index = 'Plate')
```

## Run the model.

This chunk runs the Bayesian model (eq. 1.1 - 2.3) using [rstan](https://mc-stan.org/rstan/) where C is the known DNA concentration from the Standard samples, Y is the observed Ct values form the qPCR machine and Z (Z = 1 for positive amplification & Z = 0 for non amplification hence Ct == 'Undetermined').

All the unknown parameters of the model (all Greek letters such as $\phi$, $\beta0_p$, $\beta1$, $\gamma0$, $\gamma1$, $\mu$, $\sigma$, $\theta$) are in stan model output and can be extracted by using `extract_qpcr_param(model_output)` [see below](#Model_1_extract). Note that $\beta0$ (intercept between Ct and DNA concentration) has subscript $_p$ meaning that is different for every plate. The reason for having a different $\beta0$ is due to the qPCR machine being sensitive to external factors hence every qPCR run has a different $\Delta$Rn (normalized fluorescence signal).

```{r}
M1_output <- Run_Model(stan_object = M1, stan_data = stan_data_M1)
```

## Extract outputs {#Model_1_extract}

Here is how you extract the important parameter of the model.

```{r}
extract_qpcr_param(M1_output)
```

## Plot outputs

This chunk extracts the parameters (all Greek letters in eq. 1.1 - 2.3) and plots them in relation to observed values (Ct and Z). Two different plots are generated each representing the two model compartments, the probability of detection model (eq. 1.1 - 1.2) by running `plot_qpcr_prob_det(M1_output)`, and the continuous model (eq. 2.1 - 2.3) by running`plot_qpcr_cont_mod(M1_output)`.

```{r, fig.width=8, fig.height=5}
plot_qpcr_prob_det(M1_output)
plot_qpcr_cont_mod(M1_output)
```

```{r, fig.width=17, fig.height=6}
plot_qpcr_curves(M1_output)
```

Also I made a custom function that can plot the continuous model having the plates as the facet.

```{r, fig.width=15, fig.height=9}
plot_qpcr_cont_mod_plate_specific(M1_output)
```

# Model 2 {#Model_2}

Model 2 builds on [Model 1](#Model_1) by incorporating environmental samples (e.g., field-collected data) alongside standard samples. By sharing parameters learned from the standards (e.g., detection probabilities or Ct-concentration relationships with the known DNA concentration), it estimates the DNA concentration (`C_est_log`) for imputed field samples (`Sample_name`) with credible intervals (`C_est_log_2.5%CI` and `C_est_log_97.5%CI`). The estimated DNA concentration (`C_est_log`) from environmental samples can be extracted from the model output using `extract_est_conc(M2_output)` function [see here](#M2_extract). The mathematical notation is the same as [Model 1](#Model_1) where 2 set of equations (eq 1.1 - 2.3) are used, one for standards and one for the unknown environmental samples where the only join information they share are the model parameters (all Greek letter).

## Load the stan model

```{r, warning=FALSE, message=FALSE,results='hide'}
M2 <- load_model('M2')
```

## Prepare the data to be loaded in the model.

The data should be formatted in a particular form. Please use `data_example('M2')` to see the data format for required for Model 2 or use `data(cod_qpcr)` to load the data included in the package.

```{r}
stan_data_M2 <- prep_stan_M2(
	qpcr_data = cod_qpcr,
	sample_type = "Sample_type",
	Ct = "Ct",
	sample_name_column = "Sample_name",
	standard_concentration = "Std_concentration",
	plate_index = 'Plate')
```

## Run the model.

```{r}
M2_output <- Run_Model(stan_object = M2, stan_data = stan_data_M2)
```

## Extract outputs {#M2_extract}

```{r, warning=FALSE, message=FALSE}
extract_qpcr_param(M2_output)
extract_est_conc(M2_output) %>% as_tibble()
```

## Plot outputs of Model 2

```{r, fig.width=17, fig.height=6, warning=FALSE, message=FALSE}
plot_qpcr_curves(M2_output)
```

```{r, fig.width=10, fig.height=5, warning=FALSE, message=FALSE}
plot_qpcr_prob_det(M2_output)
plot_qpcr_cont_mod(M2_output)
```

You could change the x limits by adding `xmin_log` and `xmax_log` arguments. The limits are in $log_e$ hence `xmax_log` = $8 = 3 \cdot 10^3$

```{r, fig.width=10, fig.height=5, warning=FALSE, message=FALSE}
plot_qpcr_cont_mod(M2_output,xmin_log = 0,xmax_log = 8)
```

```{r, fig.width=17, fig.height=9, warning=FALSE, message=FALSE}
plot_qpcr_cont_mod_plate_specific(M2_output)
```

Here I provide a standard way of plotting the estimated DNA concentration of environmental (field) samples by putting the samples on x-axis and eDNA concentrations on y-axis. All the DNA concentrations at around $10^{-1.3}$ and very large error bars are basically non-detects indicating that no targeted DNA was found in all technical replicate of the sample.

```{r, fig.width=17, fig.height=8, warning=FALSE, message=FALSE}
plot_est_conc(M2_output)
```

# Model 3 {#Model_3}

Here we establish that the number of observed reads (R) of each species $s$ in sample $i$ from metabarcoding sequencing is a draw from a Multinomial distribution given the proportions for each species $\psi$ in each sample and the total number of reads (T) per that sample (eq 3.1). We formulate that $\psi$ is the softmax transformation of $\gamma$ the post-PCR log-ratio amplicon abundance (eq 3.2). The post-PCR log-ratio amplicon abundance $\gamma$, is the known (pre-PCR) log-ratio DNA concentration ($\eta$) modified by the product of the ratio of amplification efficiencies $\alpha$ for each taxa and the number of PCR cycles ($NPCR$) (eq 3.3).

$$
\begin{align*} 
R_{is}\ &\sim \text {Multinomial} \left(\psi_{is},\ T_i\right) && \text{(3.1)}\\ 
{\psi}_{is}&=\frac{e^{{\gamma}_{is}}}{\sum_{i=1}^{I}e^{\gamma_{is}}} && \text{(3.2)} \\
\gamma_{is}&=\eta_{is}+\left(NPCR\times\alpha_s\right) && \text{(3.3)} \\
\end{align*}
$$

I know that log-ratio hurts people's brain so here's a development of the equation 3.3 to put into perspective.

$$ 
\begin{align*} 
\overbrace{\gamma_{is}}^\text{Post-PCR log-ratio}&= \overbrace{\eta_{is}}^\text{Pre-PCR log-ratio} + \overbrace{NPCR \cdot \alpha_s}^\text{log-ratio PCR amplification bias} \\ 
\\
ln\left(\frac{\pi_{is}}{\pi_{i,s=\text{ref}}}\right)&= ln\left(\frac{C_{is}}{C_{i,s=\text{ref}}}\right) + NPCR \cdot 
ln\left(\frac{1 + a_s}{1 + a_{s=\text{ref}}} \right)\\ 
\underbrace{\frac{\pi_{is}}{\pi_{i,s=\text{ref}}}}_{\text{Post-PCR ratio}} &=
\underbrace{\frac{C_{is}}{C_{i,s=\text{ref}}}}_{\text{Pre-PCR ratio}} \cdot \underbrace{\left( \frac{1 + a_s}{1 + a_{s=\text{ref}}} \right)^{NPCR}}_{\text{PCR amplification factor}}
\end{align*}
$$

Let say that $\pi / \pi_{\text{ref}}$ is the ratio of post-PCR amplicon proportional abundance $s$ over the reference species hence post-PCR log-ratio abundance $\gamma= ln(\pi / \pi_{\text{ref}})$. Example: if $\pi_{s=1} = 0.2$ (20%) and $\pi_{s=ref} = 0.1$ (10%) then the ratio would be 2 hence the post-PCR log-ratio abundance would be $\gamma_s = ln(2) = 0.7$. Let's say $C /C_{\text{ref}}$ is the pre-PCR amplicon abundance $s$ over the reference species hence pre-PCR log-ratio amplicon abundance $\eta = ln(C /C_{\text{ref}})$ . Example: if $C_{s=1}=3$ and $C_{s=ref}=1$ then the ratio would be 3 hence the post-PCR log-ratio abundance would be $\eta_s = ln(3) = 1.1$. Let's say that $(1+a_s) / (1+a_{s=\text{ref}})$ is the amplification efficiency of amplicon $s$ over the reference species per each PCR cycle hence the log-ratio amplification efficiency $\alpha_s = ln((1+a_s) / (1+a_{s=\text{ref}}))$. Example: if $a_{s=1} = 0.001$ and $a_{s=\text{ref}} = 0.01$ then the ratio of PCR-bias would be $(0.99)^{NPCR}$ meaning that the $s=1$ amplicon will amplify at a 0.99 rate compared to the reference species for each PCR cycle. For making easier computation we write that rate as log-ratio rate hence $\alpha = ln(0.99) = -0.01$. Now if you plug in the number in the example you should get something like this:

$$ 
\frac{0.2}{0.1} = \frac{3}{1} \cdot \left(\frac{1+0.001}{1+0.01} \right)^{40}
$$

Since we know the pre-PCR (initial) concentration when using a mock community and we can derive the post-PCR proportions using the model (eq 3.1 - 3.3) we can estimate the amplification efficiency for each species (always) relative to a reference species.

## Load the stan model

```{r, warning=FALSE, message=FALSE,results='hide'}
M3 <- load_model('M3')
```

## Prepare the data to be loaded in the model.

The data should be formatted in a particular form. Please use `data_example('M3')` to see the data format for required for Model 3 or use `data(metabarcoding)` to load the data included in the package and select the columns that belong to the mock community.

Important! Please assign 'Zz\_' before the name of the reference species and assign it on the last row on the metabarcoding dataframe.

An additional feature is the `alpha magnitude` where the user can indicate the standard deviation of a Normal distribution with mean 0 (prior distribution) for $\alpha$ parameter. This is left on purpose to be adjusted by the users as not all data are similar. On default `alpha = 0.1` but to put values in perspective alpha values = \|0.1\| indicates a 4 fold difference between pre- and post-PCR (typical 40 cycles) relative to the reference species. Typical `alpha` values for 12S MiFish primers are \< \|0.03\|.

```{r}
# Trim metabarcoding data only for mock samples
moc_dat <- metabarcoding %>% select(Species,sp_idx,ini_conc,Mock_1:Mock_6)

# # Prepare the data for going into the model
stan_data_M3 <- prep_stan_M3(
	metabarcoding_data = moc_dat,
	mock_sequencing_columns = c('Mock_1','Mock_2','Mock_3','Mock_4','Mock_5','Mock_6'),
	mock_initial_concentration = 'ini_conc',
	species_index = 'sp_idx',
	species_names = 'Species',
	number_of_PCR = 43,
	alpha_magnitude = 0.1)
```

## Run the model

```{r}
M3_output <- Run_Model(stan_object = M3, stan_data = stan_data_M3)
```

## Extract outputs {#M3_extract}

These two functions extract the amplification efficiency from the [Model 3](#Model_3) (eq 3.3). The function `extract_amp_efficiecy` extracts the values of $\alpha_s$ parameter with 95% credible intervals (CI). Note that the values are in additive log-ratios and the reference species = 0 ($ln(1) = 0$. Each `alpha` value can be interpreted as the log-difference of amplification efficiency of the species relative to the reference species per each PCR cycle. Any negative value would be indicating less efficient amplification than the reference species and positive values vice-versa. Let's say a value `-0.015` is indicating that the species is amplifying `-0.015` times less 'efficient' per each PCR cycle than that of the reference species.

The function `amp_eff_output_extract` creates a data frame that puts things in perspective by extracting and computing the values on [Equation 3.3](%7B#Model_3%7D)

```{r}
extract_amp_efficiecy(M3_output)
amp_eff_output_extract(M3_output)
```

## Plot outputs

```{r, fig.width=17, fig.height=7}
plot_amp_eff(M3_output)
```

# Model 4 {#Model_4}

Model 4 is a continuation of [Model 3](#Model_3) by incorporating environmental samples (e.g., field-collected data) alongside mock commuinty samples. By sharing the $\alpha$ parameter learned from the mock community, it estimates the pre-PCR (initial) relative abundance for imputed field samples (`Sample_name`). The estimated initial DNA relative abundance from environmental samples can be extracted from the model output using `extract_ini_prop(M4_output)` function [see here](#M4_extract). The mathematical notation is the same as [Model 3](#Model_3) where 2 set of equations (eq 3.1 - 3.3) are used, one for mock community and one for the unknown environmental samples where the only join information they share is the alpha parameter.

## Load the stan model

```{r, warning=FALSE, message=FALSE,results='hide'}
M4 <- load_model('M4')
```

## Prepare the data to be loaded in the model.

The data should be formatted in a particular form. Please use `data_example('M4')` to see the data format for required for Model 4 or use `data(metabarcoding)` to load the data included in the package.

Important! Please assign 'Zz\_' before the name of the reference species and assign it on the last row on the metabarcoding dataframe.

An additional feature is the `ini_prop_mu` and `ini_prop_sd` that can be added as arguments in `prep_stan_M4`. These 2 parameter are the mean (`ini_prop_mu`) and the standard deviation (`ini_prop_sd`) of the $\eta$ initial (pre-PCR) abundances prior distribution wichi follows a Normal distribution. By default these values are `ini_prop_mu = 0` and `ini_prop_sd = 5` indicating that $\eta \sim \mathcal{N}(0,5)$ and has a lower boundry at $-30$ indicating that initial DNA concnetration log-ratios can not be lower than $e^{-30} \approx 10^{-15}$. This is left on purpose to be adjusted by the users as this prior is not very informative hence users should adjust based on the prior knowledge on the nature of the data. To put values in perspective eta values = \|2\| or \|4\| indicates an 8 or 80 fold difference respectively between initial (pre-PCR) abundance between the species $s$ and the reference species.

```{r, warning=FALSE, message=FALSE}
# Get column names for mock samples and environmental samples
mock_columns <- metabarcoding %>% select(Mock_1:Mock_6) %>% names()
sample_columns <- metabarcoding %>% select(-all_of(mock_columns),-Species,-sp_idx,-ini_conc) %>% names()

# Prepare the data for going into the model
stan_data_M4 <- prep_stan_M4(
	metabarcoding_data = metabarcoding,
	mock_sequencing_columns = mock_columns,
	sample_sequencing_columns = sample_columns,
	mock_initial_concentration = 'ini_conc',
	species_index = 'sp_idx',
	species_names = 'Species',
	number_of_PCR = 43,
	alpha_magnitude = 0.1)
```

## Run the model

```{r}
M4_output <- Run_Model(stan_object = M4, stan_data = stan_data_M4)
```

## Extract outputs {#M4_extract}

These set of functions are extracting the same parameter as in [Model 3](#M3_extract). An additional function here is `extract_ini_prop` which extracts the pre-PCR (initial) proportions for each amplicon imputed. The output is a data frame where columns are field (unknown) samples and rows are species.

```{r}
extract_amp_efficiecy(M4_output)
amp_eff_output_extract(M4_output)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 1300) #wd
```

```{r, fig.width=17, fig.height=7}
extract_ini_prop(M4_output)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 300) #wd
```

## Plot outputs

```{r, fig.width=17, fig.height=7}
plot_amp_eff(M4_output)
bar_plot_est_ini_prop(M4_output)
```

# Model 5 {#Model_5}

Model 5 addresses the proportionality limitation of [Model 4](#Model_4) by incorporating absolute DNA concentration estimates for the reference species ($C_{i,s=\text{ref}}$) derived from [Model 2](#Model_2) (e.g., qPCR-based absolute quantification of the reference species). By leveraging the absolute DNA concentration of the reference species from model 2 we can break the compositional "closed-sum" constraint, allowing absolute quantification of all the species that have an amplification efficiency value ($\alpha$). Here re-write the additive log-ratio as the difference between log initial concentration to the reference species (eq 3.4).

$$ 
\begin{align*} 
{\gamma}_{is}&= ln\left(\frac{C_{is}}{C_{i,s=\text{ref}}}\right) + NPCR \cdot \alpha &&\text{3.3} \\ 
{\gamma}_{is}&= ln(C_{is})-ln(C_{i,s=\text{ref}}) + NPCR \cdot \alpha &&\text{3.4} \\ 
\end{align*} 
$$

## Load the stan model

```{r, warning=FALSE, message=FALSE,results='hide'}
M5 <- load_model('M5')
```

## Prepare the data to be loaded in the model.

The data should be formatted in a particular form. Please use `data_example('M5')` to see the data format for required for Model 5 or use `data(cod_qpcr)` and `data(metabarcoding)` to load the data included in the package.

Important! Please assign 'Zz\_' before the name of the reference species and assign it on the last row on the metabarcoding dataframe.

```{r,warning=FALSE, message=FALSE,results='hide'}
mock_columns <- metabarcoding %>% select(Mock_1:Mock_6) %>% names()
sample_columns <- metabarcoding %>% select(-all_of(mock_columns),-Species,-sp_idx,-ini_conc) %>% names()

stan_data_M5 <- prep_stan_M5(
	qpcr_data = cod_qpcr,
	sample_type = "Sample_type",
	Ct = "Ct",
	sample_name_column = "Sample_name",
	standard_concentration = "Std_concentration",
	plate_index = 'Plate',
	metabarcoding_data = metabarcoding,
	mock_sequencing_columns = mock_columns,
	sample_sequencing_columns = sample_columns,
	mock_initial_concentration = 'ini_conc',
	species_index = 'sp_idx',
	species_names = 'Species',
	number_of_PCR = 43,
	alpha_magnitude = 0.1)
```

## Run the model

This model is slightly more expensive computationally compared to the other models. Often times the default `treedeoth` is exceeded hence limiting the perfect exploration of the parameter space for assuring the model posterior likelihood has converged. Here is advisable to add the argument `treedepth = 12`. The model output can be diagnosed by using `diagnose_model(model_output)` and check if the treedepth is being a limiting factor.

```{r}
M5_output <- Run_Model(stan_object = M5, stan_data = stan_data_M5,
											 treedepth = 12,iterations = 3000,warmup = 1500)
```

## Extract outputs

These set of functions are extracting the same parameter as in [Model 4](#M4_extract). An additional function here is `extract_ini_conc` which extracts the absolute (initial) DNA concentration for each amplicon imputed. The output is a data frame (long form) where the initial DNA concentration (`Conc`) is in ln-scale with 95% confidence intervals (CI).

```{r}
extract_amp_efficiecy(M5_output)
amp_eff_output_extract(M5_output)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 1300) #wd
```

```{r, fig.width=17, fig.height=7}
extract_ini_prop(M5_output)
extract_ini_conc(M5_output)
```

```{r, include=FALSE, warning=FALSE, message=FALSE}
options(width = 300) #wd
```

## Plot outputs

```{r, fig.width=17, fig.height=7}
plot_amp_eff(M5_output)
bar_plot_est_ini_prop(M5_output)
plot_est_ini_conc(M5_output)
```

## Diagnose models

Typical model diagnostics are:\
Effective sample size shuold be above 200. Sometimes this can be increased by increasing the iteration numbers.\
$\hat{R}$ should be below 1.05 and preferably below 0.01. This indicates the model convergence.\
Posterior likelihood to be well-mixed.\
Acceptance rate well mixing and \> 0.75.\
Tree depth should not be at the maximum treedepth.\
No Divergence transitions should not be present during sampling phase.\
Step size should not be wiggeling during sampling phase.\

```{r, fig.width=12, fig.height=17}
diagnose_model(M5_output)
```

All the data used in this script are retrieved from [Guri et al., 2024](https://academic.oup.com/icesjms/article/81/8/1536/7728836).

# All functions {#All_functions}

For step 1:\
`load_model(model)`\
\
For step 2:\
`prep_stan_M1(...)`\
`prep_stan_M2(...)`\
`prep_stan_M3(...)`\
`prep_stan_M4(...)`\
`prep_stan_M5(...)`\

For step 3:\
`Run_Model(stan_object, stan_data)`\
\
For step 4:\
`extract_qpcr_param(model_output)`\
`extract_est_conc(model_output)`\
`extract_amp_efficiecy(model_output)`\
`amp_eff_output_extract(model_output)`\
`extract_ini_prop(model_output)`\
`extract_ini_conc(model_output)`\
\
For step 5:\
`plot_qpcr_prob_det(model_output,xmin_log, xmax_log)`\
`plot_qpcr_cont_mod(model_output,xmin_log, xmax_log)`\
`plot_qpcr_curves(model_output, xmin_log, xmax_log`\
`plot_qpcr_cont_mod_plate_specific(model_output, xmin_log, xmax_log)`\
`plot_est_conc(model_output)`\
`plot_amp_eff(model_output)`\
`bar_plot_est_ini_prop(model_output)`\
`plot_est_ini_conc(model_output, k = 2)`\
`diagnose_model()`\
